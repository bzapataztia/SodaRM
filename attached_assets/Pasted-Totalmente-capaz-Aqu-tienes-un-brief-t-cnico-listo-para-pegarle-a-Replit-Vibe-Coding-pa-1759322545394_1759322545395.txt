Totalmente capaz üôå. Aqu√≠ tienes un ‚Äúbrief t√©cnico‚Äù **listo para pegarle a Replit (Vibe Coding)** para que te construya el **Rental Manager ‚Äì Piloto de Cartera & Facturaci√≥n** fuera de Zoho, con el mismo alcance que definimos (multi-tenant, facturas, recordatorios, reporte a aseguradora, WhatsApp y OCR).

---

# 0) Resumen ejecutivo (qu√© construir)

Una app **SaaS multi-tenant** para inmobiliarias que:

1. Genera **facturas mensuales por contrato** (canon + cargos).
2. Env√≠a **recordatorios** D-3 y D+1 (email/WhatsApp).
3. Emite **reporte mensual por aseguradora** (p√≥liza colectiva) en **PDF** y lo manda por email.
4. Ofrece **bot de WhatsApp** (saldo/fecha/√∫ltima factura).
5. Procesa **OCR** de PDFs de servicios/admin para crear **cargos** en la factura del per√≠odo.

Modelo de negocio: **self-serve** (checkout con Stripe), **trial**, y planes por **n¬∫ de propiedades activas**.

---

# 1) Stack & arquitectura (preferencia)

* **Frontend:** React + Vite + TypeScript + Tailwind.
* **Backend API:** **FastAPI (Python)** + SQLAlchemy.
* **DB:** PostgreSQL (puede ser Supabase o Neon).
* **Auth:** JWT (email/password + magic link opcional).
* **Multi-tenant:** por ‚ÄúOrganization‚Äù (Tenant) con `tenant_id` en todas las tablas + Row Level in app (no RLS nativa).
* **Jobs/Scheduling:** APScheduler / Cron (Replit deploy cron o hosted worker con Celery + Redis simple).
* **Email:** SendGrid / Resend.
* **WhatsApp:** Twilio WhatsApp (o Gupshup).
* **Payments/Billing:** Stripe (Checkout + Webhooks) para planes Starter/Growth/Pro.
* **OCR:** AWS Textract o Google Vision (elijan uno) v√≠a API.
* **IA (intents):** OpenAI (gpt-4o-mini) para clasificar intents de WhatsApp cuando no encajen keywords.
* **PDF:** WeasyPrint (CSS) o ReportLab; o HTML‚ÜíPDF (Playwright).
* **Storage:** S3 compatible (R2/S3) para PDFs/reportes y archivos subidos.

---

# 2) Estructura de repo (monorepo simple)

```
/app
  /frontend
    /src
      /pages
        /auth (login, signup, reset)
        /dashboard (widgets KPIs)
        /contacts
        /properties
        /contracts
        /invoices
        /payments
        /insurers
        /policies
        /ocr-inbox
        /settings (plan/billing, templates, whatsapp)
      /components (tables, forms, modals, charts)
      /lib (api client, auth)
  /backend
    /src
      main.py
      config.py
      deps.py
      /auth (routes, jwt)
      /tenancy (middleware, resolver tenant)
      /models (sqlalchemy)
      /schemas (pydantic)
      /routes (contacts, properties, contracts, invoices, payments, insurers, policies, ocr, whatsapp, billing)
      /services
        billing_stripe.py
        email_sender.py
        whatsapp.py
        ocr_service.py
        ai_intents.py
        pdf_reports.py
        invoice_engine.py
      /jobs
        scheduler.py
        job_d_minus_3.py
        job_d_plus_1.py
        job_overdue_latefee.py
        job_insurer_monthly.py
        job_policies_renewal.py
      /utils (dates, money, errors, logging)
    alembic/ (migraciones)
    alembic.ini
  /infra
    docker-compose.yml (db + app opcional)
    seed.sql
.postman_collection.json
```

---

# 3) Modelo de datos (SQL / entidades clave)

**Tenants**

* `id (uuid pk)`, `name`, `plan` (starter|growth|pro), `max_properties (int)`, `status (active|paused)`, `created_at`.

**Users**

* `id`, `tenant_id (fk)`, `email (unique)`, `password_hash`, `role (owner|admin|collections)`, `created_at`.

**Contacts** (personas, con roles)

* `id`, `tenant_id`, `full_name`, `email`, `phone`, `roles (array: owner,tenant,guarantor,provider)`, `doc_type`, `doc_number`, `created_at`.

**Properties**

* `id`, `tenant_id`, `code (unique per tenant)`, `name`, direcci√≥n, `stratum`, `type`, `list_rent`, `status (available|rented|maintenance|reserved)`, `owner_contact_id (fk)`, `created_at`.

**Contracts**

* `id`, `tenant_id`, `number (unique per tenant)`, `property_id`, `owner_contact_id`, `tenant_contact_id`,
  `start_date`, `end_date`, `rent_amount`, `payment_day (1..30)`,
  `late_fee_type (percent|fixed|none)`, `late_fee_value (numeric)`,
  `status (draft|signed|active|expiring|expired|closed)`, `policy_id (fk nullable)`, `created_at`.

**Invoices** (cartera principal)

* `id`, `tenant_id`, `number`, `contract_id`, `tenant_contact_id`,
  `issue_date`, `due_date`,
  `subtotal`, `tax`, `other_charges`, `late_fee`, `total_amount`, `amount_paid`,
  `status (draft|issued|overdue|partial|paid)`, `created_at`.

**InvoiceCharges** (sub-items)

* `id`, `invoice_id`, `description`, `amount`.

**Payments**

* `id`, `tenant_id`, `invoice_id`, `amount`, `payment_date`, `method`, `receipt_url`, `created_at`.

**Insurers**

* `id`, `tenant_id`, `name`, `email_reports`, `policy_type (collective|individual)`, `notes`.

**Policies**

* `id`, `tenant_id`, `policy_number`, `insurer_id`, `contract_id`, `coverage_type`, `start_date`, `end_date`, `status (active|expired)`.

**OCRLogs**

* `id`, `tenant_id`, `file_url`, `provider (textract|vision)`, `confidence`, `status (ok|needs_review|error)`, `raw_json`, `message`, `created_at`.

**AuditLogs** (m√≠nimo)

* `id`, `tenant_id`, `actor_user_id`, `action`, `entity`, `entity_id`, `meta`, `created_at`.

√çndices por `tenant_id` y por `status/dates` donde aplique.

---

# 4) Reglas de negocio clave

* **Activar contrato** ‚áí Generar **1 factura por mes** entre `start_date` y `end_date`.
* **D-3 (due_date-3):** recordatorio si `status in (issued, partial)`.
* **D+1:** si no pag√≥, marcar **overdue** + aplicar **mora** (percent/fixed).
* **Pago:** aumenta `amount_paid`; `status = partial` si saldo > 0; `paid` si saldo = 0.
* **Reporte aseguradora (d√≠a 1):** PDF del **mes previo** por **insurer**, con emitido/cobrado/vencido, y detalle por contrato/inquilino.
* **OCR:** leer PDF ‚Üí detectar per√≠odo/importe/referencia ‚Üí crear **InvoiceCharge** en la **invoice** del per√≠odo correcto ‚Üí recalcular totales.
* **Planes:** aplicar **max_properties** por `tenant.plan`; bloquear altas si supera l√≠mite (mostrar CTA Upgrade).

---

# 5) Endpoints (contratos de API)

**Auth & Tenancy**

* `POST /auth/signup` (crea user + tenant si no existe, plan=trial).
* `POST /auth/login` ‚Üí JWT.
* `GET /me` (perfil + tenant + plan).

**Billing (Stripe)**

* `POST /billing/create-checkout-session` {plan} ‚Üí url.
* `POST /billing/webhook` (Stripe events): `customer.subscription.created|updated|deleted`, `invoice.payment_succeeded|failed` ‚Üí actualizar `tenant.plan`, `max_properties`, `status`.

**Contacts/Properties/Contracts** (CRUD REST b√°sico por tenant).

* `POST /contracts/{id}/activate` ‚Üí genera invoices (engine).
* `GET /contracts/{id}/invoices` ‚Üí lista.

**Invoices & Payments**

* `GET /invoices?status=&from=&to=`
* `POST /invoices/{id}/remind` (env√≠a D-3 o D+1 seg√∫n estado)
* `POST /invoices/{id}/payments` {amount, date, method, receipt_url}
* `POST /invoices/{id}/recalc` (recalcular totales, tras charges)

**Insurers/Policies** (CRUD)

* `POST /reports/insurer/{insurer_id}?period=YYYY-MM` ‚Üí genera y devuelve PDF + env√≠a por email.

**OCR**

* `POST /ocr/upload` (file) ‚Üí sube a storage y encola procesamiento.
* `POST /ocr/process` {file_url} ‚Üí ejecuta OCR, mapea cargo, crea `InvoiceCharge`.
* `GET /ocr/logs?status=` ‚Üí auditor√≠a.

**WhatsApp Bot**

* `POST /whatsapp/webhook` (Twilio/Gupshup inbound).

  * Resolver tenant por n√∫mero destino o header secreto.
  * Detectar intent (`saldo|fecha|ultima_factura|ayuda`) y responder.
* `POST /whatsapp/send` {to, template, vars} (para D-3/D+1 programados).

---

# 6) Jobs programados

* `job_d_minus_3` (08:00): para cada tenant ‚Üí invoices con `due_date=today+3` y `status in (issued, partial)` ‚áí email + whatsapp.
* `job_d_plus_1` (08:00): invoices `due_date=today-1` y `status not paid` ‚áí marcar `overdue` + **late fee**.
* `job_overdue_latefee` (07:30): recalcular mora para overdue abiertas si pol√≠tica lo indica (opcional).
* `job_insurer_monthly` (d√≠a 1, 07:00): por insurer ‚áí PDF mes previo + email + guardar en storage.
* `job_policies_renewal` (semanal): p√≥lizas vencen en 30/15 d√≠as ‚áí email interno + tag.

---

# 7) Servicios (implementaci√≥n)

**invoice_engine.py**

* `create_monthly_invoices(contract_id)`
* `apply_late_fee(invoice_id)`
* `recalc_invoice_totals(invoice_id)`

**email_sender.py**

* `send_template(to, template_id, vars)`
  Templates: **D-3**, **D+1**, **InsurerMonthlyReport** (adjunto PDF).

**whatsapp.py**

* `send_template(to, template_name, vars)`
* `handle_inbound(payload)` ‚Üí intent por **keywords** y fallback a **OpenAI**.

**ai_intents.py**

* `classify_intent(text)` ‚Üí `"saldo" | "fecha" | "ultima_factura" | "ayuda"` (OpenAI gpt-4o-mini).

**ocr_service.py**

* `process(file_url)` ‚Üí `{period_start, period_end, amount, property_code|contract_number, confidence}`.

**pdf_reports.py**

* `insurer_monthly_pdf(insurer_id, period)` ‚Üí url/bytes.

**billing_stripe.py**

* `apply_plan_limits(tenant_id, plan)` ‚Üí set `max_properties`, flags.

---

# 8) UI (p√°ginas m√≠nimas)

* **Login / Signup / Reset**

* **Setup Wizard (Get Started)**

  1. Preferencias (mora por defecto, logo).
  2. Usuarios (invitar admin/cobranzas).
  3. Importar CSV (Contacts, Properties).
  4. Plantillas (email/whatsapp).
  5. Encender automatizaciones (cron toggles).

* **Dashboard ‚ÄúCartera Hoy‚Äù**
  KPIs: Emitido mes, Vencido, Cobrado mes, %Recuperaci√≥n.
  Gr√°ficos: Aging (0‚Äì30/31‚Äì60/61‚Äì90/90+), Ingresos por mes.

* **Contacts** (tabla + create) ‚Äì roles m√∫ltiple.

* **Properties** (tabla + create) ‚Äì owner_contact.

* **Contracts** (tabla + create) ‚Äì owner/tenant; bot√≥n **Activar**.

* **Invoices** (lista + detalle): charges, pagos, ‚ÄúReenviar D-3/D+1‚Äù, ‚ÄúMarcar pagado‚Äù.

* **Payments** (lista + create).

* **Insurers / Policies** (CRUD + bot√≥n ‚ÄúGenerar reporte mes‚Äù).

* **OCR Inbox** (subir archivo, ver logs, aprobar cargos).

* **Settings ‚Üí Billing** (Stripe customer portal, upgrade/downgrade/cancel).

---

# 9) Variables de entorno (ENV)

```
DATABASE_URL=postgresql+psycopg2://user:pass@host/db
JWT_SECRET=...
JWT_EXPIRES=86400
STRIPE_SECRET=...
STRIPE_WEBHOOK_SECRET=...
SENDGRID_API_KEY=...  (o RESEND_API_KEY=...)
TWILIO_ACCOUNT_SID=...
TWILIO_AUTH_TOKEN=...
TWILIO_WHATSAPP_NUMBER=whatsapp:+1...
OPENAI_API_KEY=...
OCR_PROVIDER=textract|vision
AWS_ACCESS_KEY_ID=...
AWS_SECRET_ACCESS_KEY=...
S3_BUCKET_URL=...
S3_BUCKET_NAME=...
```

---

# 10) Migraciones & Seed

* **Alembic** con migraci√≥n inicial de todas las tablas.
* **Seed**: 1 tenant demo, 2 contactos (propietario/inquilino), 1 propiedad, 1 contrato (12 meses), generar facturas, 1 insurer + 1 policy.

---

# 11) Pruebas de aceptaci√≥n (deben pasar)

1. Activar contrato ‚áí crea **N facturas** correctas con `issue_date` y `due_date`.
2. `job_d_minus_3` env√≠a D-3 a emitidas/parciales (email/whatsapp).
3. `job_d_plus_1` marca **overdue** y aplica **late fee**.
4. Crear **Payment** reduce saldo y marca **paid** al llegar a 0.
5. Subir PDF a **OCR** ‚áí crea **InvoiceCharge** en la factura del per√≠odo y recalcula totales.
6. **Reporte aseguradora** (d√≠a 1) genera **PDF** por insurer del **mes anterior** y lo env√≠a.
7. **Stripe webhook** cambia plan y l√≠mites (`max_properties`); bloquea altas si se excede.

---

# 12) Entregables que espero de Replit

* Repo monorepo listo para deploy en Replit (o Docker local).
* **Colecci√≥n Postman** con todos los endpoints de API + ejemplos.
* **Archivo .env.example** con todas las vars.
* **Scripts**: `make dev`, `make migrate`, `make seed`, `make worker` (jobs).
* **Readme** con instrucciones de setup, cron y plantillas de email/whatsapp.
* **Tests b√°sicos** (Pytest) del `invoice_engine` y `apply_late_fee`.

---

¬øQuer√©s que adem√°s te deje **CSV de ejemplo** (Contacts, Properties, Contracts) y un **par de PDFs de prueba** para el OCR? Puedo generarlos y empaquetarlos en un `.zip` para probar en Replit de una.
